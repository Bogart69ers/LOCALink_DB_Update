@model IEnumerable<LocaLINK.Booking>

@{
    ViewBag.Title = "Worker";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <style>
        #map {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
        }


        #detail-overlay {
            width: 500px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            box-sizing: border-box;
            display: flex;
            justify-content: center;
            align-items: center;
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            border-radius: 20px;
            flex-wrap:wrap;
        }

        #detail-content {
            flex: 1;
            text-align: left;
        }

        #detail-arrows {
            flex: 0 0 auto;
        }

        .popup-btn {
            cursor: pointer;
            margin-top: 5px;
            background-color: #007bff;
            color: white;
            border: none;
            width: 100%;
            padding: 5px 10px;
            border-radius: 5px;
            font-weight: bold;
        }
    </style>
</head>

    <body>
        @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
        {
            <div class="alert alert-success" role="alert">
                @ViewBag.SuccessMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @ViewBag.ErrorMessage
            </div>
        }
        <div id="map"></div>
@using (Html.BeginForm())
{   
        <div id="detail-overlay">
            <div id="detail-content"></div>
            <input type="submit" class="popup-btn" value="Accept Request">
        </div>

        
}
        <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
        <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

        <script>
    var currentBookingIndex = 0;
    var map;

    function updateDetailContent(index, bookings) {
        var content = "";
        var booking = bookings[index];
        var bookingDate = new Date(Date.parse(booking.booking_date));
        var formattedDate = bookingDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });

        content += "<input id='booking_id' name='id' value='" + booking.booking_id + "'>" +
            "<b>Location:</b> " + booking.location + "<br>" +
            "<b>Customer Name: </b>" + booking.name + "<br>" +
            "<b>Date: </b>" + formattedDate + "<br>" +
            "<b>Price:</b> " + booking.total_price + "<br>" +
            "<b>Status: </b>" + booking.status + "<br><br>";

        document.getElementById('detail-content').innerHTML = content;
    }
    function initmap(bookings) {
        map = new L.Map('map');
        var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
        var osmAttrib = 'Map data © <a href="https://openstreetmap.org">OpenStreetMap</a> contributors';
        var osm = new L.TileLayer(osmUrl, { minZoom: 2, maxZoom: 19, attribution: osmAttrib });
        map.setView(new L.LatLng(12.8797, 121.7740), 6);

        map.addLayer(osm);

        // Filter bookings with status "Pending" or 0
        var pendingBookings = bookings.filter(function(booking) {
            return booking.status === "Pending" || booking.status === 0;
        });

        pendingBookings.forEach(function (booking, index) {
            var popupContent = "<b>Price:</b> " + booking.total_price;

            var marker = L.marker([booking.latitude, booking.longitude]).addTo(map);
            marker.bindPopup(popupContent, { autoClose: false });

            marker.on('click', function () {
                currentBookingIndex = index;
                updateDetailContent(index, pendingBookings);
            });
        });

        // If there are no pending bookings, display a message
        if (pendingBookings.length === 0) {
            document.getElementById('detail-content').innerHTML = "No pending bookings";
        } else {
            updateDetailContent(0, pendingBookings);
        }
    }


    document.addEventListener('DOMContentLoaded', function () {
        var bookings = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, new Newtonsoft.Json.JsonSerializerSettings
        {
            ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
        }));

        initmap(bookings);       
    });
        </script>


    </body>

</html>
